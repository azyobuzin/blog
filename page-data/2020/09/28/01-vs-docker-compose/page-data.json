{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/09/28/01-vs-docker-compose/","result":{"data":{"site":{"siteMetadata":{"title":"あじょろぐ","siteUrl":"https://blog.azyobuzi.net","social":{"twitter":"@azyobuzin"}}},"blogPost":{"html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>開発環境を Docker でいい感じにしてくれるやつとして、 Visual Studio では「コンテナー開発ツール」が、 Visual Studio Code には Remote 拡張があります。これらは Dockerfile や docker-compose.yml を用意すると、その中でアプリを動かすことができるやつです。しかし、同じものではないので、挙動はまったく異なります。それぞれメリット、デメリットがあるので、両方使えるとうれしいわけです。そこで、うまいこと両方で使える docker-compose.yml を書いてみようという試みをやっていきます。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_それぞれのメリットデメリット\">それぞれのメリット、デメリット</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>コンテナ化、特に Docker Compose を使いたい理由として、クラサバ型データベースを開発環境に置きたいという欲求があります。適当にデバッグ実行したら適当なデータベースが動いていると便利です。というわけで、今回は PostgreSQL コンテナとアプリ開発環境が共存することを目標とします。</p>\n</div>\n<div class=\"paragraph\">\n<p>Visual Studio の Docker 連携は、コンテナにビルド結果とデバッガーの口をマウントして、コンテナ内でアプリを実行してくれます。メリットは、開発環境はホストにあるので、 Visual Studio をフルに使えることです。デメリットは、コンテナ内に入って何か操作するというのが面倒なところです。</p>\n</div>\n<div class=\"paragraph\">\n<p>VSCode Remote は、コンテナの中で VSCode が動きます。ホストのディレクトリをコンテナにマウントすることで、ホストのファイルを編集できます。メリットは、 VSCode のターミナルからコンテナ内を触り放題なところです。例えば Windows で開発していて、 Linux で動かしたい開発ツールがあるときには便利です。デメリットは、 Visual Studio に慣れた人間にとって、 VSCode の C# 拡張は不足を感じるところです。</p>\n</div>\n<div class=\"paragraph\">\n<p>データベースを置くという今回の仮定では、データベースを手で操作するときに簡単に環境に入るために VSCode を使いたいものの、メインの開発は Visual Studio でしたい、となり、共存させたい欲求が発生しています。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_やっていく\">やっていく</h2>\n<div class=\"sectionbody\">\n<div class=\"sect2\">\n<h3 id=\"_1_visual_studio_で連携を設定する\">1. Visual Studio で連携を設定する</h3>\n<div class=\"paragraph\">\n<p>ここで説明する手順を実行するには、 Visual Studio 2019 で「ASP.NET と Web 開発」または「.NET Core クロスプラットフォームの開発」ワークロードがインストールされている必要があります。</p>\n</div>\n<div class=\"paragraph\">\n<p>ソリューションエクスプローラーで、 Docker で動かしたいプロジェクトを右クリックし、「コンテナー オーケストレーターのサポート」を追加します。</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/azyobuzin/20200928/20200928004102.png\" alt=\"「コンテナー オーケストレーターのサポート」を追加\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>いろいろ聞かれますが、 OS は Linux、ツールは Docker Compose としておけば OK です。</p>\n</div>\n<div class=\"paragraph\">\n<p>完了すると、 Dockerfile と「docker-compose」というプロジェクトが生えます。</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/azyobuzin/20200928/20200928004106.png\" alt=\"完了後のソリューション\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>これで、必要なファイルを Visual Studio に自動生成させることができました。ここから先は生成されたファイル書き換えたり移動させたりして VSCode にフィットさせていきましょう。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_2_dockerfile_を改変する\">2. Dockerfile を改変する</h3>\n<div class=\"paragraph\">\n<p>生成された Dockerfile を確認すると、本番ビルド用のスクリプトが書かれています。今回はこれを完全に捨てることにします。ただ、プロジェクトディレクトリ下に Dockerfile がないと Visual Studio が認識してくれないので、ここに開発環境を作成するスクリプトを書きましょう。本番用 Dockerfile はどこか別のところに置いてください……。</p>\n</div>\n<div class=\"paragraph\">\n<p>最低限必要なのは <code>FROM mcr.microsoft.com/dotnet/core/sdk:3.1-buster</code> だけです。「buster」のところは好きなディストリビューションに変えてください。必要に応じて、例えば今回の仮定ならば postgresql-client を入れたりするのもいいでしょう。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_3_docker_compose_yml_を改変する\">3. docker-compose.yml を改変する</h3>\n<div class=\"paragraph\">\n<p>ここからの操作は Visual Studio を破壊するので、すべてが完了するまで Visual Studio は閉じておきましょう。</p>\n</div>\n<div class=\"paragraph\">\n<p>いま、ソリューションディレクトリ直下に「docker-compose.yml」と「docker-compose.override.yml」があります。直下にあってもわかりにくいので、後で devcontainer.json というファイルを入れることになる .devcontainer というディレクトリをつくっておき、そこに移動させます。</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/azyobuzin/20200928/20200928010233.png\" alt=\"docker-compose.yml を .devcontainer へ移動\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>さらに、 docker-compose.override.yml という名前だと Visual Studio 用なのか VSCode 用なのかわかりにくいので、 docker-compose.vs.yml に改名しておくといいでしょう。</p>\n</div>\n<div class=\"paragraph\">\n<p>いま docker-compose.yml の中身はこのようになっていると思います。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">docker-compose.yml</div>\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3.4&#x27;</span>\n\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">mydatabaseapp:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">${DOCKER_REGISTRY-}mydatabaseapp</span>\n    <span class=\"hljs-attr\">build:</span>\n      <span class=\"hljs-attr\">context:</span> <span class=\"hljs-string\">.</span>\n      <span class=\"hljs-attr\">dockerfile:</span> <span class=\"hljs-string\">MyDatabaseApp/Dockerfile</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>改変が必要なポイントは次のふたつです。</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p><code>build.context</code> のパスを正しく直す。 docker-compose.yml を移動したので、それに合わせます。</p>\n</li>\n<li>\n<p>PostgreSQL を追加する。</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>改変結果はこんな感じです。 docker-compose.yml の構文バージョンやプロジェクト名は、環境に合わせて書き換えてください。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">docker-compose.yml</div>\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3.4&#x27;</span>\n\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">mydatabaseapp:</span>\n    <span class=\"hljs-attr\">build:</span>\n      <span class=\"hljs-attr\">context:</span> <span class=\"hljs-string\">..</span>\n      <span class=\"hljs-attr\">dockerfile:</span> <span class=\"hljs-string\">MyDatabaseApp/Dockerfile</span>\n\n  <span class=\"hljs-attr\">db:</span>\n    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">postgres:11</span>\n    <span class=\"hljs-attr\">environment:</span>\n      <span class=\"hljs-attr\">POSTGRES_PASSWORD:</span> <span class=\"hljs-string\">postgres</span>\n    <span class=\"hljs-attr\">volumes:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./db/data:/var/lib/postgresql/data</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>データベースのデータの永続化は、ホストのパスを指定するか、この docker-compose.yml の外で作成したボリュームを割り当ててください。でないと、 VS と VSCode で Docker Compose のプロジェクト名が異なるので、同じデータを見てくれません。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_4_docker_compose_dcproj_を改変する\">4. docker-compose.dcproj を改変する</h3>\n<div class=\"paragraph\">\n<p>docker-compose.yml を移動したので、こっちも書き換えます。これもソリューションディレクトリ直下にあると邪魔なので .devcontainer に移動させてしまいましょう。</p>\n</div>\n<div class=\"paragraph\">\n<p>さらにファイル名変更を反映して、ディレクトリ外に行ってしまった .dockerignore をプロジェクトから消します。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">docker-compose.dcproj</div>\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"diff\"> &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;\n &lt;Project ToolsVersion=&quot;15.0&quot; Sdk=&quot;Microsoft.Docker.Sdk&quot;&gt;\n   &lt;PropertyGroup Label=&quot;Globals&quot;&gt;\n     &lt;ProjectVersion&gt;2.1&lt;/ProjectVersion&gt;\n     &lt;DockerTargetOS&gt;Linux&lt;/DockerTargetOS&gt;\n     &lt;ProjectGuid&gt;3caba81b-3f76-4ecf-9907-78b96280d41c&lt;/ProjectGuid&gt;\n   &lt;/PropertyGroup&gt;\n   &lt;ItemGroup&gt;\n<span class=\"hljs-deletion\">-    &lt;None Include=&quot;docker-compose.override.yml&quot;&gt;</span>\n<span class=\"hljs-addition\">+    &lt;None Include=&quot;docker-compose.vs.yml&quot;&gt;</span>\n       &lt;DependentUpon&gt;docker-compose.yml&lt;/DependentUpon&gt;\n     &lt;/None&gt;\n     &lt;None Include=&quot;docker-compose.yml&quot; /&gt;\n<span class=\"hljs-deletion\">-    &lt;None Include=&quot;.dockerignore&quot; /&gt;</span>\n   &lt;/ItemGroup&gt;\n &lt;/Project&gt;</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>またソリューションファイルもパスを書き換えます。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">MyDatabaseApp.sln</div>\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"diff\"><span class=\"hljs-deletion\">-Project(&quot;{E53339B2-1760-4266-BCC7-CA923CBCF16C}&quot;) = &quot;docker-compose&quot;, &quot;docker-compose.dcproj&quot;, &quot;{3CABA81B-3F76-4ECF-9907-78B96280D41C}&quot;</span>\n<span class=\"hljs-addition\">+Project(&quot;{E53339B2-1760-4266-BCC7-CA923CBCF16C}&quot;) = &quot;docker-compose&quot;, &quot;.devcontainer\\docker-compose.dcproj&quot;, &quot;{3CABA81B-3F76-4ECF-9907-78B96280D41C}&quot;</span></code></pre>\n</div>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_5_vscode_向けの_docker_compose_yml_をつくる\">5. VSCode 向けの docker-compose.yml をつくる</h3>\n<div class=\"paragraph\">\n<p>VSCode 向けに .devcontainer/docker-compose.vscode.yml を作っていきます。ポイントは次のふたつです。</p>\n</div>\n<div class=\"ulist\">\n<ul>\n<li>\n<p>コンテナが終了しないように無限ループさせる</p>\n</li>\n<li>\n<p>作業ディレクトリをマウントする</p>\n</li>\n</ul>\n</div>\n<div class=\"paragraph\">\n<p>実際の YAML で表すとこれだけです。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">docker-compose.vscode.yml</div>\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3.4&#x27;</span>\n\n<span class=\"hljs-attr\">services:</span>\n  <span class=\"hljs-attr\">mydatabaseapp:</span>\n    <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">/bin/sh</span> <span class=\"hljs-string\">-c</span> <span class=\"hljs-string\">&quot;while sleep 1000; do :; done&quot;</span>\n    <span class=\"hljs-attr\">volumes:</span>\n      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">..:/workspace:cached</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>必要に応じて、ポートを公開するために <code>ports</code> を追加したりしてください。</p>\n</div>\n<div class=\"paragraph\">\n<p>参考: <a href=\"https://bufferings.hatenablog.com/entry/2020/06/11/233201\">VS Code Remote - Containers を Docker Compose で使うのだー！ - Mitsuyuki.Shiiba</a></p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_6_devcontainer_json_をつくる\">6. devcontainer.json をつくる</h3>\n<div class=\"paragraph\">\n<p>devcontainer.json は VSCode にコンテナ作成を指示する設定ファイルです。これも .devcontainer に置きます。</p>\n</div>\n<div class=\"paragraph\">\n<p>最小限の devcontainer.json はこんな感じです。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">devcontainer.json</div>\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"json\">{\n  <span class=\"hljs-attr\">&quot;dockerComposeFile&quot;</span>: [\n    <span class=\"hljs-string\">&quot;docker-compose.yml&quot;</span>,\n    <span class=\"hljs-string\">&quot;docker-compose.vscode.yml&quot;</span>\n  ],\n\n  <span class=\"hljs-comment\">// docker-compose.yml の services のうち、開発環境につかうもの</span>\n  <span class=\"hljs-attr\">&quot;service&quot;</span>: <span class=\"hljs-string\">&quot;mydatabaseapp&quot;</span>,\n\n  <span class=\"hljs-comment\">// docker-compose.vscode.yml で指定したマウント先</span>\n  <span class=\"hljs-attr\">&quot;workspaceFolder&quot;</span>: <span class=\"hljs-string\">&quot;/workspace&quot;</span>,\n\n  <span class=\"hljs-comment\">// 事前にインストールしておいてほしい拡張</span>\n  <span class=\"hljs-attr\">&quot;extensions&quot;</span>: [\n    <span class=\"hljs-string\">&quot;ms-dotnettools.csharp&quot;</span>\n  ]\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>いじり倒したいときは <a href=\"https://code.visualstudio.com/docs/remote/devcontainerjson-reference\">devcontainer.json reference</a> を読むといいでしょう。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_完成\">完成！</h3>\n<div class=\"paragraph\">\n<p>これで準備完了です。 VSCode で「Reopen in Container」を実行すると、コンテナ上で VSCode が動き始めます。 Dockerfile のビルドが走るので気長に待ちましょう。</p>\n</div>\n<div class=\"paragraph\">\n<p>また、 Visual Studio でも docker-compose プロジェクトをスタートアッププロジェクトに設定して実行できるはずです！</p>\n</div>\n<div class=\"admonitionblock caution\">\n<table>\n<tr>\n<td class=\"icon\">\n<div class=\"title\">Caution</div>\n</td>\n<td class=\"content\">\nVisual Studio と VSCode の同時実行は危険です。同じマウント先のデータベースがふたつ動くことになってしまいます。また、それぞれ終了後 30 秒くらいはコンテナが動いているので、コンテナが終了されたことを確認してから、他方を使ってください。\n</td>\n</tr>\n</table>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_まとめ\">まとめ</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>頑張れば Visual Studio でも VSCode でも使える Docker Compose 環境がつくれることを示しました。これで開発が捗ればいいね。捗らんか……。</p>\n</div>\n<div class=\"paragraph\">\n<p>ここまでの内容を clone するだけでお試しできるものを GitHub に置いておきました。</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/azyobuzin/vs-docker-compose-example\">azyobuzin/vs-docker-compose-example</a></p>\n</div>\n</div>\n</div>","description":"開発環境を Docker でいい感じにしてくれるやつとして、 Visual Studio では「コンテナー開発ツール」が、 Visual Studio Code には Remote 拡張があります。これらは Dockerfile や docker-compose.yml を用意すると、その中でアプリを動かすことができるやつです。しかし、同じものではないので、挙動はまったく異なります。それぞれメリット、デメリットがあるので、両方使えるとうれしいわけです。そこで、うまいこと両方で使える docker-compose.yml を書いてみようという試みをやっていきます。","thumbnail":null,"commitHash":"9e34bbd96973eef726d9096c853ec997c33926a0","slug":"2020-09-28-01-vs-docker-compose","title":"Visual Studio と VSCode どちらでも使える Docker Compose 環境","pubdate":"2020-09-28T02:29+09:00","revdate":"2020-09-28T02:34:47+09:00","keywords":["C#","Docker"],"parent":{"__typename":"File","relativePath":"2020-09-28-01-vs-docker-compose.adoc"}}},"pageContext":{"slug":"2020-09-28-01-vs-docker-compose"}},"staticQueryHashes":["2274497578","446747883"]}