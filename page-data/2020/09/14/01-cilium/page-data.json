{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/09/14/01-cilium/","result":{"data":{"site":{"siteMetadata":{"title":"あじょろぐ","siteUrl":"https://blog.azyobuzi.net","social":{"twitter":"@azyobuzin"}}},"blogPost":{"html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://cilium.io/\">Cilium</a> の Docker プラグインの導入を検討したものの、無理みがあった。ぱたり。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_イントロダクション\">イントロダクション</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>ケチケチしたインターネットライフに Kubernetes は無縁です。</p>\n</div>\n<div class=\"paragraph\">\n<p>以前、 Docker のネットワークに細かい設定ができないという不満があって、 Kubernetes の調査をしていたこともありました[1]。しかしながら、趣味で動かしている web サーバに Kubernetes を導入するのは、ケチケチした人間には不可能です。メモリ 2GB (GMO の株主優待を受けて、スペックアップしました！) の VPS に詰め込めるだけのアプリを詰める、そういうことをしている人間にとっては、 Kubernetes の導入はデメリットの方が多くなります。</p>\n</div>\n<div class=\"paragraph\">\n<p>そんなわけで、私が管理しているサービスは、基本的に Docker Compose で管理されています。しかし、動かしているアプリも増えてきて、 Pleroma のような SSRF 対策[2]も必要なアプリも出てくると、そろそろ真面目にネットワークポリシーを導入して、安心してコンテナを動かしたくなります。</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p><a href=\"https://azyobuzin.hatenablog.com/entry/2019/03/21/024504\">Kubernetesで隔離Mastodonネットワークを作った</a></p>\n</li>\n<li>\n<p><a href=\"https://azyobuzin.hatenablog.com/entry/2019/11/12/005317\">比較的安全に Docker で Pleroma サーバーを建てる</a></p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>しかしまぁどう検索しても Kubernetes の話しか出てこなくてキレそうだったわけですが、 <a href=\"https://cilium.io/\">Cilium</a> という仮想ネットワークツールが Docker のプラグインとして動いてくれるみたいなので、検証してみました。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_docker_ネットワークの課題\">Docker ネットワークの課題</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Docker 標準の bridge ネットワークの表現力を確認して、課題を確認します。</p>\n</div>\n<div class=\"paragraph\">\n<p>まず、 Docker のネットワークとは何かですが、隔離されたサブネットです。コンテナはネットワークに接続することで、そのサブネットの IP アドレスが与えられます。 <code>docker network connect</code> コマンドで接続できるので「接続」と書きましたが、「参加」という表現のほうがわかりやすいかもしれません。コンテナは 0 個以上のネットワークに参加することができます。</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/azyobuzin/20200913/20200913020748.png\" alt=\"コンテナとネットワークの関係\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>基本的なネットワークの種類である bridge ネットワークでは、ネットワークごとに次のような設定ができます。</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>ネットワーク内のコンテナ間で通信 (Inter Container Connectivity) できるようにするか</p>\n</li>\n<li>\n<p>IP マスカレードを有効にするか = ホストの外に通信できるようにするか</p>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>これの何が不満かというと、コンテナ間の通信の可否はネットワーク単位でしか設定できないということです。</p>\n</div>\n<div class=\"paragraph\">\n<p>例えば、次の図のように、ふたつのアプリがひとつのデータベースを共有しているとします。前提がケチケチなので、アプリごとにデータベースのプロセスを分けたりしないという想定です。これを bridge ネットワークで実現しようとすると、DB、アプリ1、アプリ2が同一ネットワークに参加している必要があります。すると、アプリとデータベースの通信だけできればいいにも関わらず、アプリ同士の通信も可能になっています。これがまずい状況であるという例を示しましょう。アプリ1がクリティカルな情報を扱っているものの、認証は前段のリバースプロキシに任せている、とします。ここでアプリ2に脆弱性があったら、意図せずアプリ1のデータを認証なしで読み出してしまうかもしれません。</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/a/azyobuzin/20200913/20200913022141.png\" alt=\"DBを参照するふたつのアプリ\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>このような想定をし始めると、 bridge ネットワークに不満を感じてくるでしょう。コンテナ間の通信を制御しているのは iptables なので、 iptables を直接いじってあげればどうにかできなくはないですが、自分でやりたくはないです。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_cilium\">Cilium</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>とりあえず「docker network policy」でググってみてください。はい、 1 ページ目のすべてが Kubernetes ですね。というわけで、意外と Docker のネットワークを強固にしようという試みはやられていないようです。存在するネットワークプラグインは皆複数ノードをひとつのネットワークとして使えるようにするみたいなやつばかりです。そんな中で、やっと見つけてきたのが Cilium です。</p>\n</div>\n<div class=\"paragraph\">\n<p>Cilium も複数ノードをひとつのネットワークとして使えるようにするやつのひとつです。メインの用途は Kubernetes の仮想ネットワークです。 Kubernetes の仮想ネットワークといえば、クラスタ内がひとつのネットワークになっていて、初期状態では任意の Pod 同士で通信ができるやつです。そして、それを制限する方法として NetworkPolicy リソースがあります。 Cilium はこれを実現します。</p>\n</div>\n<div class=\"paragraph\">\n<p>Cilium が他の仮想ネットワークツールと違うところは、 Kubernetes がなくてもネットワークポリシーが設定できるところです。つまり単体で使い物になる！ ……はずでした。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_getting_started\">Getting Started</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>Cilium を Docker で使う例は、ドキュメントにこの 1 ページしかありません。ありがとうございました。</p>\n</div>\n<div class=\"paragraph\">\n<p><a href=\"https://docs.cilium.io/en/v1.8/gettingstarted/docker/\">Cilium with Docker &amp; libnetwork ― Cilium 1.8.3 documentation</a></p>\n</div>\n<div class=\"paragraph\">\n<p>Debian 10 で試してみましたが、特に Linux の設定は必要なく、<a href=\"https://github.com/cilium/cilium/blob/v1.8.3/examples/getting-started/docker-compose.yml\">サンプルの docker-compose.yml</a> を投入するだけで起動することができました。</p>\n</div>\n<div class=\"paragraph\">\n<p>とにかく、この 1 ページを一通り読むと、ポリシー設定を突っ込むところまで体験できます。</p>\n</div>\n<div class=\"paragraph\">\n<p>メモリ使用量は Cilium + Consul で 100MB 弱と、まぁまぁ許容範囲内かなというところでした。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_で何がダメだったの\">で、何がダメだったの？</h2>\n<div class=\"sectionbody\">\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>ポートバインディング (<code>--publish</code>) が使えない</p>\n</li>\n<li>\n<p>ポリシーが永続化されない</p>\n</li>\n</ol>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_1_ポートバインディングが使えない\">1. ポートバインディングが使えない</h3>\n<div class=\"paragraph\">\n<p><code>docker run -p 80:80 nginx</code> と書くとホストの 80 番ポートからコンテナの 80 番ポートにつながるやつです。 Cilium の Docker プラグインはこのオプションを実装していないので、指定しても何も起こりません。</p>\n</div>\n<div class=\"paragraph\">\n<p>改造して解決しようかと挑んだものの、別の課題を先になんとかしないといけないことがわかったので面倒になりました。</p>\n</div>\n<div class=\"paragraph\">\n<p>これは現実的な解決策があり、 Traefik を使ったリバースプロキシを host ネットワークに用意すればいいです。 Traefik 2 からは TCP のリバースプロキシもできるようになったので、 HTTP に限らず何でもいけます。</p>\n</div>\n</div>\n<div class=\"sect2\">\n<h3 id=\"_2_ポリシーが永続化されない\">2. ポリシーが永続化されない</h3>\n<div class=\"paragraph\">\n<p>これが致命的。</p>\n</div>\n<div class=\"paragraph\">\n<p>ポリシーを設定しても永続化してくれません。 Consul や etcd がそこにあるのにどうして記憶してくれないの？</p>\n</div>\n<div class=\"paragraph\">\n<p>永続化されないということは Cilium が起動したときにポリシーを設定する必要があります。これが問題になるのは、特にマシンや Docker デーモンを再起動したときです。 Cilium が起動するのを待ち、ポリシーを設定するようなサイドカーを用意しておかないと、正しくポリシーが適用されません。このようなサイドカーの実装を考え始めると、どんどん制御ループ、つまり Kubernetes のコンセプトに近づいていきます。</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_結局\">結局</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://azyobuzin.hatenablog.com/entry/2019/03/04/144245\">K3s に最初に食いついた</a>人間なので、諦めて K3s と仲良くするのが一番いいのかもしれません。うっ……。</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>働かざる者Kubeからずというように、個人の趣味プロジェクトでKubernetesを使うべきではない</p>\n</div>\n</blockquote>\n<div class=\"attribution\">\n&#8212; <a href=\"https://twitter.com/azyobuzin/status/1251774353579978758\">@azyobuzin</a>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_おまけ_ipv6_を使う\">おまけ: IPv6 を使う</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://docs.cilium.io/en/v1.8/gettingstarted/docker/\">サンプル</a>をいくらか改造すると IPv6 も使えるようになります。</p>\n</div>\n<div class=\"olist arabic\">\n<ol class=\"arabic\">\n<li>\n<p>Vagrantfile の <code>cilium_opts</code> から <code>--enable-ipv6=false</code> を削除する</p>\n</li>\n<li>\n<p><code>cilium-net</code> を作成するコマンドで <code>--ipv6</code> を指定する</p>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code>docker network create --driver cilium --ipam-driver cilium --ipv6 cilium-net</code></pre>\n</div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"paragraph\">\n<p>これでコンテナに IPv6 アドレスが振られるようになります。が、 NAT が設定されないので外に出ていったパケットが帰ってこられなくなります。これは Cilium の Issue に積まれていますが、なかなか修正される様子がないです。ワークアラウンドとしては、自分で ip6tables を設定してねということです。</p>\n</div>\n<div class=\"quoteblock\">\n<blockquote>\n<div class=\"paragraph\">\n<p>Install an ip6tables MASQUERADE rule for IPv6 traffic leaving the node.</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code>ip6tables -t nat -A POSTROUTING ! -o cilium_+ -s f00d::/16 -j MASQUERADE</code></pre>\n</div>\n</div>\n</blockquote>\n<div class=\"attribution\">\n&#8212; <a href=\"https://github.com/cilium/cilium/issues/6320#issuecomment-442722329\">Cilium needs ip6tables rules to route IPv6 packets · Issue #6320 · cilium/cilium</a>\n</div>\n</div>\n</div>\n</div>","description":"Cilium の Docker プラグインの導入を検討したものの、無理みがあった。ぱたり。","thumbnail":null,"commitHash":"6690539a59773f75cf6d1c42e45baac59dd828be","slug":"2020-09-14-01-cilium","title":"結局、理想のネットワークは Docker で実現できなかった","pubdate":"2020-09-14T22:13+09:00","revdate":"2020-09-14T22:13:10+09:00","keywords":["Docker"],"parent":{"__typename":"File","relativePath":"2020-09-14-01-cilium.adoc"}}},"pageContext":{"slug":"2020-09-14-01-cilium"}},"staticQueryHashes":["2274497578","446747883"]}