{"componentChunkName":"component---src-templates-blog-post-js","path":"/2020/05/03/01-projectref/","result":{"data":{"site":{"siteMetadata":{"title":"あじょろぐ","siteUrl":"https://blog.azyobuzi.net","social":{"twitter":"@azyobuzin"}}},"blogPost":{"html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>複数のプロジェクトをひとつのリポジトリで管理するとき、プロジェクト間の参照関係は csproj に <code>&lt;ProjectReference&gt;</code> を書くわけですが、ここで、このプロジェクトを NuGet パッケージ化するときのことを考えます。例えば、 A と B というプロジェクトがあり、 B が A に依存しているとします。このとき B を <code>dotnet pack</code> してできあがるパッケージの A への依存はどのようになるでしょうか？ 実際にやってみると、現在の A のバージョン<strong>以上</strong>という依存関係になります。</p>\n</div>\n<div class=\"paragraph\">\n<p>ここで、 A の現在のバージョンを 1.0.0 とします。 Semantic Versioning に従っていると考えると、もし 2.0.0 がリリースされたら、破壊的な変更が入っているかもしれません。それでも B から A への依存は 1.0.0 <strong>以上</strong>で良いのでしょうか？ と考えると、「以上」以外の柔軟な依存関係を指定したくなりませんか？ というわけで、 <code>&lt;ProjectReference&gt;</code> を使ったプロジェクト間参照で、柔軟なバージョン範囲指定をしたいというのが今回のお話です。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_サンプルプロジェクト\">サンプルプロジェクト</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>文章でだらだらと説明されても読みたくないのはわかります。ので、実際の csproj を示しておきます。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">A/A.csproj</div>\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Project</span> <span class=\"hljs-attr\">Sdk</span>=<span class=\"hljs-string\">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PropertyGroup</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TargetFramework</span>&gt;</span>netstandard2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TargetFramework</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Version</span>&gt;</span>1.0.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Version</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">PropertyGroup</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Project</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"listingblock\">\n<div class=\"title\">B/B.csproj</div>\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Project</span> <span class=\"hljs-attr\">Sdk</span>=<span class=\"hljs-string\">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PropertyGroup</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TargetFramework</span>&gt;</span>netstandard2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TargetFramework</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">PropertyGroup</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ItemGroup</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ProjectReference</span> <span class=\"hljs-attr\">Include</span>=<span class=\"hljs-string\">&quot;..\\A\\A.csproj&quot;</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ItemGroup</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Project</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>ここで、 B に対して <code>dotnet pack</code> を実行したときの nuspec の <code>&lt;dependencies&gt;</code> はこのようになります。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">group</span> <span class=\"hljs-attr\">targetFramework</span>=<span class=\"hljs-string\">&quot;.NETStandard2.0&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;A&quot;</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;1.0.0&quot;</span> <span class=\"hljs-attr\">exclude</span>=<span class=\"hljs-string\">&quot;Build,Analyzers&quot;</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">group</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p><code>version=\"1.0.0\"</code> という指定は、「1.0.0 以上」と解釈されます。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_目標設定\">目標設定</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>ここでは、 Semantic Versioning という前提で、 B が依存するのは A v1.0.0 以上 2.0.0 未満、としましょう。こうすれば、 B が A の Public API のみに依存しているならば、 B はこの依存関係が解決できる限り、必ず動作するといえます。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_一筋縄で実現できたらブログ書いてない\">一筋縄で実現できたらブログ書いてない</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>はい。これは NuGet の Issue (<a href=\"https://github.com/NuGet/Home/issues/5556\">NuGet/Home#5556</a>) に挙がっており、現在も実現されていません。しかし頑張ればできないこともない状況になっています。</p>\n</div>\n<div class=\"paragraph\">\n<p>必要なものは <a href=\"https://dotnet.microsoft.com/download/dotnet/5.0\">.NET 5.0 Preview SDK</a> (執筆時点で 5.0.100-preview.3.20216.6) です。最新の NuGet を搭載している SDK を使うと、 csproj に少し手を入れるだけで、 <code>&lt;ProjectReference&gt;</code> に対する依存関係に介入できるようになります。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_目標をクリアする_csproj\">目標をクリアする csproj</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>仕組みとかいいからとりあえず使いたいって人は、これをコピペしてください。バージョンの指定方法は、 NuGet のドキュメント (<a href=\"https://docs.microsoft.com/ja-jp/nuget/concepts/package-versioning#version-ranges\">Version ranges</a>) を確認してください。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Project</span> <span class=\"hljs-attr\">Sdk</span>=<span class=\"hljs-string\">&quot;Microsoft.NET.Sdk&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">PropertyGroup</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">TargetFramework</span>&gt;</span>netstandard2.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">TargetFramework</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">PropertyGroup</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ItemGroup</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ProjectReference</span> <span class=\"hljs-attr\">Include</span>=<span class=\"hljs-string\">&quot;..\\A\\A.csproj&quot;</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ItemGroup</span>&gt;</span>\n\n  <span class=\"hljs-comment\">&lt;!-- 以下を追加 --&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Target</span> <span class=\"hljs-attr\">Name</span>=<span class=\"hljs-string\">&quot;SetDependencyVersion&quot;</span> <span class=\"hljs-attr\">AfterTargets</span>=<span class=\"hljs-string\">&quot;_GetProjectReferenceVersions&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ItemGroup</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">_ProjectReferencesWithVersions</span> <span class=\"hljs-attr\">Update</span>=<span class=\"hljs-string\">&quot;..\\A\\A.csproj&quot;</span> <span class=\"hljs-attr\">ProjectVersion</span>=<span class=\"hljs-string\">&quot;[1.0.0,2.0.0)&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ItemGroup</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Target</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Project</span>&gt;</span></code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>出力される nuspec の <code>&lt;dependencies&gt;</code> はこんな感じになります。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">group</span> <span class=\"hljs-attr\">targetFramework</span>=<span class=\"hljs-string\">&quot;.NETStandard2.0&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;A&quot;</span> <span class=\"hljs-attr\">version</span>=<span class=\"hljs-string\">&quot;[1.0.0, 2.0.0)&quot;</span> <span class=\"hljs-attr\">exclude</span>=<span class=\"hljs-string\">&quot;Build,Analyzers&quot;</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">group</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span></code></pre>\n</div>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_仕組み\">仕組み</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><code>dotnet pack</code> (MSBuild で <code>Pack</code> ターゲットを実行する) では、 <code>&lt;ProjectReference&gt;</code> Item があったら、そのプロジェクトのバージョンを読み込み、 <code>&lt;_ProjectReferencesWithVersions&gt;</code> という Item を作成します。そこで、その処理が行われる <code>_GetProjectReferenceVersions</code> ターゲットの後に、読み込まれたバージョンを上書きするようなターゲットを作成することで、好きなバージョンに書き換えることができます。</p>\n</div>\n<div class=\"paragraph\">\n<p>ここまでは古い SDK でもできたのですが、古い SDK では <code>ProjectVersion</code> 属性にバージョンの<strong>範囲</strong>が指定されることを想定していませんでした。つまり <code>1.0.0</code> は受け付けるけど、 <code>[1.0.0,2.0.0)</code> は受け付けてくれなかったわけです。新しい SDK では、範囲を指定してもエラーにならないようになったので、このようなハックでお茶を濁せるようになりました。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_今後もっと簡単になるか\">今後もっと簡単になるか？</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p><a href=\"https://github.com/NuGet/Home/issues/5556\">NuGet/Home#5556</a> を監視していきましょう。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_nuget_に対するぼやき\">NuGet に対するぼやき</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>依存関係解決の戦略がデフォルトで「条件を満たす最小バージョン」な所為で、依存バージョンをすぐ「以上」にしてしまうのは NuGet の悪いところだなぁと思っています。そのおかげで lock ファイルを使わなくても、あまり崩壊しないという利点はありますが、少なくともリビジョンリリースは自動で最新にしてほしくない？ という思いがあります。</p>\n</div>\n</div>\n</div>","description":"複数のプロジェクトをひとつのリポジトリで管理するとき、プロジェクト間の参照関係は csproj に &lt;ProjectReference&gt; を書くわけですが、ここで、このプロジェクトを NuGet パッケージ化するときのことを考えます。例えば、 A と B というプロジェクトがあり、 B が A に依存しているとします。このとき B を dotnet pack してできあがるパッケージの A への依存はどのようになるでしょうか？ 実際にやってみると、現在の A のバージョン以上という依存関係になります。\n\n\nここで、 A の現在のバージョンを 1.0.0 とします。 Semantic Versioning に従っていると考えると、もし 2.0.0 がリリースされたら、破壊的な変更が入っているかもしれません。それでも B から A への依存は 1.0.0 以上で良いのでしょうか？ と考えると、「以上」以外の柔軟な依存関係を指定したくなりませんか？ というわけで、 &lt;ProjectReference&gt; を使ったプロジェクト間参照で、柔軟なバージョン範囲指定をしたいというのが今回のお話です。","thumbnail":null,"commitHash":"e2cebed9a96d337145e6152b1189402dd55123df","slug":"2020-05-03-01-projectref","title":"ProjectReference にバージョン範囲を指定したい","pubdate":"2020-05-03T04:07+09:00","revdate":"2020-05-03T04:12:42+09:00","keywords":["C#"],"parent":{"__typename":"File","relativePath":"2020-05-03-01-projectref.adoc"}}},"pageContext":{"slug":"2020-05-03-01-projectref"}},"staticQueryHashes":["2274497578","446747883"]}