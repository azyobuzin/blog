{"componentChunkName":"component---src-templates-blog-post-js","path":"/2021/03/23/01-dataflowblock-without-buffer/","result":{"data":{"site":{"siteMetadata":{"title":"あじょろぐ","siteUrl":"https://blog.azyobuzi.net","social":{"twitter":"@azyobuzin"}}},"blogPost":{"html":"<div id=\"preamble\">\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>また TPL Dataflow の話です。突然ですが、バッファのない PropagatorBlock って欲しくないですか？</p>\n</div>\n<div class=\"paragraph\">\n<p>例えば、複数の SourceBlock があって、それをひとつの SourceBlock として返したいとき。</p>\n</div>\n<div class=\"listingblock\">\n<div class=\"content\">\n<pre class=\"undefined highlight\"><code data-lang=\"cs\"><span class=\"hljs-function\">ISourceBlock&lt;T&gt; <span class=\"hljs-title\">CreateSource</span>(<span class=\"hljs-params\"></span>)</span>\n{\n    IEnumerable&lt;ISourceBlock&lt;T&gt;&gt; sources = <span class=\"hljs-comment\">/* ... */</span>;\n\n    <span class=\"hljs-keyword\">var</span> resultBlock = <span class=\"hljs-keyword\">new</span> BufferBlock&lt;T&gt;(<span class=\"hljs-keyword\">new</span> DataflowBlockOptions() { BoundedCapacity = <span class=\"hljs-number\">1</span> });\n    <span class=\"hljs-keyword\">foreach</span> (<span class=\"hljs-keyword\">var</span> s <span class=\"hljs-keyword\">in</span> sources) s.LinkTo(resultBlock);\n\n    <span class=\"hljs-keyword\">return</span> resultBlock;\n}</code></pre>\n</div>\n</div>\n<div class=\"paragraph\">\n<p>どうでしょう？ <code>resultBlock</code> は、1件はバッファに持ってしまうので、後段のブロックがどうであれ、ソースからは必ず1件多く取り出されてしまいます。</p>\n</div>\n<div class=\"paragraph\">\n<p>1件くらいいいじゃない？ それは <code>sources</code> 次第でしょう。</p>\n</div>\n<div class=\"paragraph\">\n<p>というわけで、本題のバッファのない PropagatorBlock が欲しい、ということです。もし <code>resultBlock</code> にバッファがなければ、 <code>CreateSource</code> の戻り値を利用する（リンクする）とき、初めて <code>sources</code> からデータが取り出されます。やりたいですね。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_タイトルオチ\">タイトルオチ</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>もうタイトルでオチてますが、このような PropagatorBlock はデータフローブロックのプロトコル上、おそらく作れません。プロトコルについては<a href=\"https://blog.azyobuzi.net/2020/04/30/01-reactivestreams/\">以前</a>ざっくりと紹介しましたが、今回はこのプロトコルと、既存のブロックの実装で使われているロックが鍵となります。</p>\n</div>\n<div class=\"paragraph\">\n<p>TPL Dataflow のブロック間の通信は、完全に直列です。ある SourceBlock からは同時に1件しか送信しないし、ある TargetBlock は同時に1件しか受信できません。その制御は <code>lock</code> ステートメントで行われています（絶対ボトルネックじゃん）。</p>\n</div>\n<div class=\"paragraph\">\n<p>PropagatorBlock は Source と Target 両方の性質を持っており、 Target で受信したデータを加工して Source がデータを出力します。 Target 部は1件ずつ受信を行い、加工を行うタスクへ投げ、加工が終わったデータは Source 部のキューに積まれ、 Source 部は1件ずつ送信を行います。つまり PropagatorBlock においては Target と Source は並列に動いています。</p>\n</div>\n<div class=\"paragraph\">\n<p>TPL Dataflow のソースコードを読むと、 TargetBlock または PropagatorBlock の Target 部を直列化するために使用されるロックを <code>IncomingLock</code>、 SourceBlock または PropagatorBlock の Source 部を直列化するために使用されるロックを <code>OutgoingLock</code> と呼んでいるので、この名称を使っていきます。</p>\n</div>\n<div class=\"paragraph\">\n<p>では、このロックを考慮しながら、 Source から Target へデータを送信する各パターンをシーケンス図に表してみます。</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"basicoffer.svg\" alt=\"Source から Target へデータを送信する様子\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>もう複数のロックがあるという時点で嫌ですね。</p>\n</div>\n<div class=\"paragraph\">\n<p>ではここで、間にバッファのない PropagatorBlock が入ったらどうなるでしょう？ 変わりませんね。通信内容をそのまま素通しすればいいだけなので。しかし忘れてはいけないことがあります: 間に入るブロックもブロックなので、ファンインもファンアウトも複数持つことができます。したがって、今注目していた Source と Target 以外の要因によって通信が発生することがあります。例えば、別の Target にデータを送信できたので、次の1件の送信を開始しよう、とすると次の操作が開始します。</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"offerbypropagator.svg\" alt=\"Propagator が送信を開始する様子\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>そろそろ嫌な予感がしてきましたね。 Propagator は Source の OutgoingLock なんてお構いなしに Target にデータの送信を試みることができます。つまり、タイミングによっては……。実際に例を見てみましょう。 Source が Propagator に送信しようとしたら、 Propagator が Target に送信中だった場合、こうなります。</p>\n</div>\n<div class=\"imageblock\">\n<div class=\"content\">\n<img src=\"deadlock1.svg\" alt=\"デッドロックが発生する例\">\n</div>\n</div>\n<div class=\"paragraph\">\n<p>見事なデッドロックですね。並行にロックを取得する場合、取得順を同じにしないとデッドロックするという鉄則がありますが、完全に破る構図です。</p>\n</div>\n<div class=\"paragraph\">\n<p>ただ、このデッドロックは実は回避できます。「(1) OfferMessage」のところで Propagator が「(2) ConsumeMessage」を実行中でまだ返ってきてないぞと判断して、このメッセージを延期させてしまえば、 OutgoingLock が外れるので先に進むことができます。</p>\n</div>\n<div class=\"paragraph\">\n<p>今の例では、 Source, Propagator, Target が 1:1:1 だったので回避できました。が、1:N:1、つまりひとつの Source が複数の Propagator に接続されていて、さらにその Propagator たちがひとつの Target に接続されている場合はどうでしょう。先程の図の (1) が Propagator1 で、 (2) が Propagator2 で起こっていたら、 Propagator 同士はお互いを知らないので調停することができません。</p>\n</div>\n</div>\n</div>\n<div class=\"sect1\">\n<h2 id=\"_まとめ\">まとめ</h2>\n<div class=\"sectionbody\">\n<div class=\"paragraph\">\n<p>バッファを持たない PropagatorBlock は、デッドロックを起こす運命にあります。回避可能なケースは Source, Propagator, Target が 1:1:1 の関係にあるときです。例えば、 <a href=\"https://docs.microsoft.com/ja-jp/dotnet/api/system.threading.tasks.dataflow.dataflowblock.linkto?view=net-5.0#System_Threading_Tasks_Dataflow_DataflowBlock_LinkTo__1_System_Threading_Tasks_Dataflow_ISourceBlock___0__System_Threading_Tasks_Dataflow_ITargetBlock___0__System_Predicate___0__\"><code>LinkTo</code> メソッドの <code>predicate</code> 引数を持つオーバーロード</a>は、内部で PropagatorBlock を作成しています。しかしこのブロックは外部へ公開されず、あくまでリンクのために隠蔽されています。通常のブロックとして、複数のファンイン、ファンアウトを持てるという要件を満たそうとすると、不可能になります。</p>\n</div>\n<div class=\"paragraph\">\n<p>結局この記事で何が言いたかったかというと、拙作の TPL Dataflow 補助ライブラリの <a href=\"https://github.com/azyobuzin/BiDaFlow\">BiDaFlow</a> で、バッファなしの <code>TransformBlock</code> を提供していたのですが、デッドロックの可能性を排除できなかったので、機能を削除することにしました。悲しい。</p>\n</div>\n</div>\n</div>","description":"また TPL Dataflow の話です。突然ですが、バッファのない PropagatorBlock って欲しくないですか？\n\n\n例えば、複数の SourceBlock があって、それをひとつの SourceBlock として返したいとき。\n\n\n\nISourceBlock&lt;T&gt; CreateSource()\n{\n    IEnumerable&lt;ISourceBlock&lt;T&gt;&gt; sources = /* ... */;\n\n    var resultBlock = new BufferBlock&lt;T&gt;(new DataflowBlockOptions() { BoundedCapacity = 1 });\n    foreach (var s in sources) s.LinkTo(resultBlock);\n\n    return resultBlock;\n}\n\n\n\nどうでしょう？ resultBlock は、1件はバッファに持ってしまうので、後段のブロックがどうであれ、ソースからは必ず1件多く取り出されてしまいます。\n\n\n1件くらいいいじゃない？ それは sources 次第でしょう。\n\n\nというわけで、本題のバッファのない PropagatorBlock が欲しい、ということです。もし resultBlock にバッファがなければ、 CreateSource の戻り値を利用する（リンクする）とき、初めて sources からデータが取り出されます。やりたいですね。","thumbnail":"https://cdn-ak.f.st-hatena.com/images/fotolife/a/azyobuzin/20210323/20210323033433.png","commitHash":"dec79669da75a585abe296bc2ba8ce1c3ec27999","slug":"2021-03-23-01-dataflowblock-without-buffer","title":"バッファのない PropagatorBlock はつくれないという話","pubdate":"2021-03-23T03:44+09:00","revdate":"2021-03-23T03:44:04+09:00","keywords":["C#"],"parent":{"__typename":"File","relativePath":"2021-03-23-01-dataflowblock-without-buffer/index.adoc"}}},"pageContext":{"slug":"2021-03-23-01-dataflowblock-without-buffer"}},"staticQueryHashes":["2274497578","446747883"]}